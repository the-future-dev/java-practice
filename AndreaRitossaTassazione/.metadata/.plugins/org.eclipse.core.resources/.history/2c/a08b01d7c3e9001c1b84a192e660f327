package taxcomparator.persistence;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.StringTokenizer;

import taxcomparator.model.Fasce;
import taxcomparator.model.Fascia;

public class MyFasceReader implements FasceReader {
/*
 * no-tax area:  8.174
 * 0-15.000:		23%
 * 15.000-28.000:	25%
 * 28.000-50.000:	35%
 * 50.000-oltre:	43%
*/
	private static NumberFormat deformatterNumber = NumberFormat.getNumberInstance(Locale.ITALY);
	private static NumberFormat deformatterPercent = NumberFormat.getPercentInstance(Locale.ITALY);
	
	@Override
	public Fasce readFasce(String descr, Reader reader) throws BadFileFormatException, IOException{
		if (reader == null || descr == null)
			throw new IllegalArgumentException("nullable input");
		
		BufferedReader BR = new BufferedReader(reader);
		try {
			
			String line = BR.readLine();
			if (line == null)
				throw new BadFileFormatException("Nullable file to read");
			
			StringTokenizer stk = new StringTokenizer(line, ":");
			if (stk.countTokens() != 2)
				throw new BadFileFormatException("not good number of tokens");
			if (!stk.nextToken().trim().toLowerCase().equals("no-tax area"))
				throw new BadFileFormatException("First line not: no-tax area");
			double noTax = deformatterNumber.parse(stk.nextToken().trim()).doubleValue();
			List<Fascia> lf = new ArrayList<Fascia>();
			
			while((line = BR.readLine())!= null) {
				stk = new StringTokenizer(line, "-:");
				if (stk.countTokens() != 3)
					throw new BadFileFormatException("not good number of tokens");
				double a = deformatterNumber.parse(stk.nextToken().trim()).doubleValue();
				double da= deformatterNumber.parse(stk.nextToken().trim()).doubleValue();
				double aliquota= deformatterPercent.parse(stk.nextToken().trim()).doubleValue();;
				Fascia f = new Fascia(a, da, aliquota);
				
			}
			
		}catch(ParseException e) {
			throw new BadFileFormatException("Error in number");
		}
		
		return null;
	}

}
