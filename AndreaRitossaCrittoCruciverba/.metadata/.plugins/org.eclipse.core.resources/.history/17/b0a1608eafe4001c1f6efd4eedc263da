package crosswords.persistence;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.util.StringTokenizer;

import crosswords.model.Scheme;

public class MyConfigReader implements ConfigReader {
	private Scheme board;
	private int size;
	
	public MyConfigReader(Reader reader) throws IOException, BadFileFormatException {
		if (reader == null) throw new IOException("File not found");
		BufferedReader br = new BufferedReader(reader);
		
		String firstLine = br.readLine();
		
		if (firstLine == null) throw new BadFileFormatException("Not first Line");
		
		size = parseFirstLine(firstLine);
	}
	
	private int parseFirstLine(String line) throws BadFileFormatException {
		StringTokenizer stk = new StringTokenizer(line, " x");
		String s;
		if (stk.countTokens() != 3) throw new BadFileFormatException("Has "+stk.countTokens()+" tokens");
		if (!(s = stk.nextToken().trim()).equals("DIM"))
			throw new BadFileFormatException(s+" not DIM");
		
		int a, b;
		try {
			a = Integer.parseInt(stk.nextToken().trim());
			b = Integer.parseInt(stk.nextToken().trim());
		}catch(Error e) {
			throw new BadFileFormatException("number");
		}
		
		if (a != b)
			throw new BadFileFormatException(a+" != "+b);
		
		return a;
	}
	
	private Scheme parseOtherLines(BufferedReader br) {
		int nCol = 0;
		String line = 0;
		while()
		return null;
	}
	
	@Override
	public int getSize() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public Scheme getScheme() {
		// TODO Auto-generated method stub
		return null;
	}

}
