package crosswords.ui;



import java.util.ArrayList;
import java.util.Optional;

import crosswords.controller.Controller;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;

import javafx.scene.control.TextArea;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;

public class MainPane extends BorderPane {

	private TextArea output;
	private Controller controller;
	private ComboBox<Integer> numbers ;
	private ComboBox<String> letters;
	private Button button;
	
	public MainPane(Controller controller, Stage stage) {
		this.controller=controller;
		HBox topPane = new HBox();
		this.setTop(topPane);

		output = new TextArea();
		output.setPrefColumnCount(12);
		output.setPrefRowCount(12);
		output.setFont(Font.font("Courier New", FontWeight.NORMAL, 12));

		output.setEditable(false);
		
		updateGrid();
		
		this.setCenter(output);

		HBox bottomPane = new HBox();
		numbers= new ComboBox<Integer>();
		
		ArrayList<Integer> alphNum = new ArrayList<>();
		for (int i =1; i<=26; i++) alphNum.add(Integer.valueOf(i));
		numbers.setItems( FXCollections.observableArrayList(alphNum)); 
		
		ArrayList<String> alphChar = new ArrayList<>();
		for (int i = 'a'; i<='z'; i++) alphChar.add(new String(""+(char) i));
		letters= new ComboBox<String>();
		letters.setItems( FXCollections.observableArrayList(alphChar)); 
		
		button = new Button("Imposta");
		this.setBottom(bottomPane);
		
		
		bottomPane.getChildren().add(numbers);
		bottomPane.getChildren().add(letters);
		bottomPane.getChildren().add(button);
		button.setOnAction(this::updateMapping);

}
	
	
//	
//	private void populateComboNumbers(ComboBox<Integer> combo) {
//		//TO-DO
//	}
//	
//	private void populateComboLetters(ComboBox<String> combo) {
//		//TO-DO
//	}
	
	private void updateGrid()
	{
		output.setText(controller.getGame().toString());
	}
	
	
	private void updateMapping(ActionEvent event)
	{
		try {
			int num = this.numbers.getValue();
			String str = this.letters.getValue().trim();
			controller.updateMapping(num.get(), str.get());
			updateGrid();
		} catch(NullPointerException e) {
			CrossWordsApp.alert("Errore: devi selezionare", "", "Sembra che non abbia selezionato qualcosa...");
		}
	}
}
