package minirail.persistence;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import minirail.model.Gauge;
import minirail.model.Train;

public class MyConfigReader implements ConfigReader {
	private Gauge gauge;
	private String stringGauge;
	private List<Train> trains;
	
	public MyConfigReader(Reader reader) throws IOException, BadFileFormatException {
		if (reader == null ) throw new IOException("not a good file");
		BufferedReader br = new BufferedReader(reader);
		
		String scala = br.readLine();
		if (scala == null || scala.isEmpty()) throw new BadFileFormatException("NOT a good first line my man");
		String[] firstDiv = scala.split(" ");
		if (firstDiv.length != 2) throw new BadFileFormatException("Line not w 2 words");
		if ( firstDiv[1].toLowerCase().equals("gauge") ) throw new BadFileFormatException("");
		gauge = Gauge.valueOf(firstDiv[0]);
		if (gauge == null) throw new BadFileFormatException("Not a good gauge");
		
		trains = new ArrayList<>();
		String line; 
		while((line = br.readLine()) != null) {
//			IC583, 65 cm, 160 km/h
			StringTokenizer stk = new StringTokenizer(line);
			
		}
	}
	
	@Override
	public List<Train> getTrains() {
		// TODO Auto-generated method stub
		return this.trains;
	}

	@Override
	public Gauge getGauge() {
		// TODO Auto-generated method stub
		return this.gauge;
	}

}
